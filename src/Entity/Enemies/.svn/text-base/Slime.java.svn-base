package Entity.Enemies;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;

import TileMap.TileMap;
import Entity.*;

public class Slime extends Enemy {

	private BufferedImage[] sprites;
	
	public Slime (TileMap tm){
		super(tm);
		
		moveSpeed = 0.3;
		maxSpeed = 0.3;
		fallSpeed = 0.2;
		maxFallSpeed = 10.0;
		
		width = 24;
		height = 24;
		cwidth = 24;
		cheight = 24;
		
		health = maxHealth = 3;
		
		//this objject is not a pickup
		setPickUp(false);
		
		//load sprites
		try{
			BufferedImage spritesheet = ImageIO.read(getClass().getResourceAsStream("/Sprites/Enemies/slime.gif"));
			
			sprites = new BufferedImage[4];
			for (int i = 0; i < sprites.length; i++){
				sprites[i] = spritesheet.getSubimage(i*width, 0, width, height);
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
		animation = new Animation();
		animation.setFrames(sprites);
		animation.setDelay(300);
		
		right = true;
		facingRight = true;
	}
	
	private void getNextPosition(){
		
		if(left){
			dx -= moveSpeed;
			if (dx <  -maxSpeed){
				dx = -maxSpeed;
			}
		}
		else if (right){
			dx += moveSpeed;
			if (dx >  maxSpeed){
				dx = maxSpeed;
			}
		}
		
		if (falling){
			dy += fallSpeed;
		}
	}
	public void update(){
		getNextPosition();
		checkTileMapCollision();
		setPosition(xtemp, ytemp);
		
		//check flinching
		if(flinching){
			long elapsed = (System.nanoTime() - flinchTimer)/ 1000000;
			if (elapsed > 400){
				flinching = false;
			}
		}
		
		//reverse direction if hit wall
		if (right && dx == 0){
			right = false;
			left = true;
			facingRight = false;
			
		}
		else if (left  && dx == 0){
			left  = false;
			right = true;
			facingRight = true;
		}
		//update animation
		animation.update();
		
	}
	
	public void draw(Graphics2D g){
		setMapPosition();
		super.draw(g, 1);
	}
}